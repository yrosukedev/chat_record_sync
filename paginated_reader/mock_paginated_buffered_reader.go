// Code generated by MockGen. DO NOT EDIT.
// Source: paginated_reader/paginated_buffered_reader.go

// Package paginated_reader is a generated GoMock package.
package paginated_reader

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	business "github.com/yrosukedev/chat_record_sync/business"
)

// MockChatRecordPaginatedBufferedReader is a mock of ChatRecordPaginatedBufferedReader interface.
type MockChatRecordPaginatedBufferedReader struct {
	ctrl     *gomock.Controller
	recorder *MockChatRecordPaginatedBufferedReaderMockRecorder
}

// MockChatRecordPaginatedBufferedReaderMockRecorder is the mock recorder for MockChatRecordPaginatedBufferedReader.
type MockChatRecordPaginatedBufferedReaderMockRecorder struct {
	mock *MockChatRecordPaginatedBufferedReader
}

// NewMockChatRecordPaginatedBufferedReader creates a new mock instance.
func NewMockChatRecordPaginatedBufferedReader(ctrl *gomock.Controller) *MockChatRecordPaginatedBufferedReader {
	mock := &MockChatRecordPaginatedBufferedReader{ctrl: ctrl}
	mock.recorder = &MockChatRecordPaginatedBufferedReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRecordPaginatedBufferedReader) EXPECT() *MockChatRecordPaginatedBufferedReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockChatRecordPaginatedBufferedReader) Read(pageToken PageToken, pageSize uint64) ([]*business.ChatRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", pageToken, pageSize)
	ret0, _ := ret[0].([]*business.ChatRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockChatRecordPaginatedBufferedReaderMockRecorder) Read(pageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockChatRecordPaginatedBufferedReader)(nil).Read), pageToken, pageSize)
}
