// Code generated by MockGen. DO NOT EDIT.
// Source: chat_sync/buffer_reader/chat_record_buffered_reader.go

// Package buffer_reader is a generated GoMock package.
package buffer_reader

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	business "github.com/yrosukedev/chat_record_sync/chat_sync/business"
)

// MockChatRecordBufferedReader is a mock of ChatRecordBufferedReader interface.
type MockChatRecordBufferedReader struct {
	ctrl     *gomock.Controller
	recorder *MockChatRecordBufferedReaderMockRecorder
}

// MockChatRecordBufferedReaderMockRecorder is the mock recorder for MockChatRecordBufferedReader.
type MockChatRecordBufferedReaderMockRecorder struct {
	mock *MockChatRecordBufferedReader
}

// NewMockChatRecordBufferedReader creates a new mock instance.
func NewMockChatRecordBufferedReader(ctrl *gomock.Controller) *MockChatRecordBufferedReader {
	mock := &MockChatRecordBufferedReader{ctrl: ctrl}
	mock.recorder = &MockChatRecordBufferedReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRecordBufferedReader) EXPECT() *MockChatRecordBufferedReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockChatRecordBufferedReader) Read() ([]*business.ChatRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]*business.ChatRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockChatRecordBufferedReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockChatRecordBufferedReader)(nil).Read))
}
