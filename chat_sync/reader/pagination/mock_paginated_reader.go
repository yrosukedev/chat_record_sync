// Code generated by MockGen. DO NOT EDIT.
// Source: chat_sync/reader/pagination/paginated_reader.go

// Package pagination is a generated GoMock package.
package pagination

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	business "github.com/yrosukedev/chat_record_sync/chat_sync/business"
)

// MockPaginatedReader is a mock of PaginatedReader interface.
type MockPaginatedReader struct {
	ctrl     *gomock.Controller
	recorder *MockPaginatedReaderMockRecorder
}

// MockPaginatedReaderMockRecorder is the mock recorder for MockPaginatedReader.
type MockPaginatedReaderMockRecorder struct {
	mock *MockPaginatedReader
}

// NewMockPaginatedReader creates a new mock instance.
func NewMockPaginatedReader(ctrl *gomock.Controller) *MockPaginatedReader {
	mock := &MockPaginatedReader{ctrl: ctrl}
	mock.recorder = &MockPaginatedReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaginatedReader) EXPECT() *MockPaginatedReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockPaginatedReader) Read(inPageToken *PageToken, pageSize uint64) ([]*business.ChatRecord, *PageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", inPageToken, pageSize)
	ret0, _ := ret[0].([]*business.ChatRecord)
	ret1, _ := ret[1].(*PageToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockPaginatedReaderMockRecorder) Read(inPageToken, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPaginatedReader)(nil).Read), inPageToken, pageSize)
}
