// Code generated by MockGen. DO NOT EDIT.
// Source: chat_sync/reader/pagination/pagination_storage.go

// Package pagination is a generated GoMock package.
package pagination

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaginationStorage is a mock of PaginationStorage interface.
type MockPaginationStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPaginationStorageMockRecorder
}

// MockPaginationStorageMockRecorder is the mock recorder for MockPaginationStorage.
type MockPaginationStorageMockRecorder struct {
	mock *MockPaginationStorage
}

// NewMockPaginationStorage creates a new mock instance.
func NewMockPaginationStorage(ctrl *gomock.Controller) *MockPaginationStorage {
	mock := &MockPaginationStorage{ctrl: ctrl}
	mock.recorder = &MockPaginationStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaginationStorage) EXPECT() *MockPaginationStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPaginationStorage) Get() (*PageToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*PageToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPaginationStorageMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPaginationStorage)(nil).Get))
}

// Set mocks base method.
func (m *MockPaginationStorage) Set(pageToken *PageToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", pageToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockPaginationStorageMockRecorder) Set(pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockPaginationStorage)(nil).Set), pageToken)
}
