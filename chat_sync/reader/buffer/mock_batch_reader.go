// Code generated by MockGen. DO NOT EDIT.
// Source: chat_sync/reader/buffer/batch_reader.go

// Package buffer is a generated GoMock package.
package buffer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	business "github.com/yrosukedev/chat_record_sync/chat_sync/business"
)

// MockBatchReader is a mock of BatchReader interface.
type MockBatchReader struct {
	ctrl     *gomock.Controller
	recorder *MockBatchReaderMockRecorder
}

// MockBatchReaderMockRecorder is the mock recorder for MockBatchReader.
type MockBatchReaderMockRecorder struct {
	mock *MockBatchReader
}

// NewMockBatchReader creates a new mock instance.
func NewMockBatchReader(ctrl *gomock.Controller) *MockBatchReader {
	mock := &MockBatchReader{ctrl: ctrl}
	mock.recorder = &MockBatchReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchReader) EXPECT() *MockBatchReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockBatchReader) Read() ([]*business.ChatRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]*business.ChatRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockBatchReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBatchReader)(nil).Read))
}
