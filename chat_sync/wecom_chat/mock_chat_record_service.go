// Code generated by MockGen. DO NOT EDIT.
// Source: wecom_chat/chat_record_service.go

// Package wecom_chat is a generated GoMock package.
package wecom_chat

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatRecordService is a mock of ChatRecordService interface.
type MockChatRecordService struct {
	ctrl     *gomock.Controller
	recorder *MockChatRecordServiceMockRecorder
}

// MockChatRecordServiceMockRecorder is the mock recorder for MockChatRecordService.
type MockChatRecordServiceMockRecorder struct {
	mock *MockChatRecordService
}

// NewMockChatRecordService creates a new mock instance.
func NewMockChatRecordService(ctrl *gomock.Controller) *MockChatRecordService {
	mock := &MockChatRecordService{ctrl: ctrl}
	mock.recorder = &MockChatRecordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRecordService) EXPECT() *MockChatRecordServiceMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockChatRecordService) Read(seq, pageSize uint64) ([]*WeComChatRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", seq, pageSize)
	ret0, _ := ret[0].([]*WeComChatRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockChatRecordServiceMockRecorder) Read(seq, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockChatRecordService)(nil).Read), seq, pageSize)
}
