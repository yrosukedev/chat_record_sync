// Code generated by MockGen. DO NOT EDIT.
// Source: wecom_chat/chat_record_transformer.go

// Package wecom_chat is a generated GoMock package.
package wecom_chat

import (
	"github.com/yrosukedev/chat_record_sync/chat_sync/business"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatRecordTransformer is a mock of ChatRecordTransformer interface.
type MockChatRecordTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockChatRecordTransformerMockRecorder
}

// MockChatRecordTransformerMockRecorder is the mock recorder for MockChatRecordTransformer.
type MockChatRecordTransformerMockRecorder struct {
	mock *MockChatRecordTransformer
}

// NewMockChatRecordTransformer creates a new mock instance.
func NewMockChatRecordTransformer(ctrl *gomock.Controller) *MockChatRecordTransformer {
	mock := &MockChatRecordTransformer{ctrl: ctrl}
	mock.recorder = &MockChatRecordTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRecordTransformer) EXPECT() *MockChatRecordTransformerMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockChatRecordTransformer) Transform(wecomChatRecord *WeComChatRecord, userInfo *WeComUserInfo, externalContacts []*WeComExternalContact) (*business.ChatRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", wecomChatRecord, userInfo, externalContacts)
	ret0, _ := ret[0].(*business.ChatRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform.
func (mr *MockChatRecordTransformerMockRecorder) Transform(wecomChatRecord, userInfo, externalContacts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockChatRecordTransformer)(nil).Transform), wecomChatRecord, userInfo, externalContacts)
}
