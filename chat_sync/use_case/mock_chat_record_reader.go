// Code generated by MockGen. DO NOT EDIT.
// Source: use_case/chat_record_reader.go

// Package use_case is a generated GoMock package.
package use_case

import (
	"github.com/yrosukedev/chat_record_sync/chat_sync/business"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatRecordReader is a mock of ChatRecordReader interface.
type MockChatRecordReader struct {
	ctrl     *gomock.Controller
	recorder *MockChatRecordReaderMockRecorder
}

// MockChatRecordReaderMockRecorder is the mock recorder for MockChatRecordReader.
type MockChatRecordReaderMockRecorder struct {
	mock *MockChatRecordReader
}

// NewMockChatRecordReader creates a new mock instance.
func NewMockChatRecordReader(ctrl *gomock.Controller) *MockChatRecordReader {
	mock := &MockChatRecordReader{ctrl: ctrl}
	mock.recorder = &MockChatRecordReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRecordReader) EXPECT() *MockChatRecordReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockChatRecordReader) Read() (*business.ChatRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(*business.ChatRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockChatRecordReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockChatRecordReader)(nil).Read))
}
