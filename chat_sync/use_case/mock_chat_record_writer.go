// Code generated by MockGen. DO NOT EDIT.
// Source: use_case/chat_record_writer.go

// Package use_case is a generated GoMock package.
package use_case

import (
	"github.com/yrosukedev/chat_record_sync/chat_sync/business"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChatRecordWriter is a mock of ChatRecordWriter interface.
type MockChatRecordWriter struct {
	ctrl     *gomock.Controller
	recorder *MockChatRecordWriterMockRecorder
}

// MockChatRecordWriterMockRecorder is the mock recorder for MockChatRecordWriter.
type MockChatRecordWriterMockRecorder struct {
	mock *MockChatRecordWriter
}

// NewMockChatRecordWriter creates a new mock instance.
func NewMockChatRecordWriter(ctrl *gomock.Controller) *MockChatRecordWriter {
	mock := &MockChatRecordWriter{ctrl: ctrl}
	mock.recorder = &MockChatRecordWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRecordWriter) EXPECT() *MockChatRecordWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockChatRecordWriter) Write(record *business.ChatRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockChatRecordWriterMockRecorder) Write(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockChatRecordWriter)(nil).Write), record)
}
