// Code generated by MockGen. DO NOT EDIT.
// Source: chat_sync/use_case/use_case.go

// Package http_controller is a generated GoMock package.
package http_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	use_case "github.com/yrosukedev/chat_record_sync/chat_sync/use_case"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockUseCase) Run(ctx context.Context) []*use_case.SyncError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].([]*use_case.SyncError)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockUseCaseMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockUseCase)(nil).Run), ctx)
}
