// Code generated by MockGen. DO NOT EDIT.
// Source: chat_sync/wecom/chat_record_transformer.go

// Package wecom is a generated GoMock package.
package wecom

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	business "github.com/yrosukedev/chat_record_sync/chat_sync/business"
)

// MockChatRecordTransformer is a mock of ChatRecordTransformer interface.
type MockChatRecordTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockChatRecordTransformerMockRecorder
}

// MockChatRecordTransformerMockRecorder is the mock recorder for MockChatRecordTransformer.
type MockChatRecordTransformerMockRecorder struct {
	mock *MockChatRecordTransformer
}

// NewMockChatRecordTransformer creates a new mock instance.
func NewMockChatRecordTransformer(ctrl *gomock.Controller) *MockChatRecordTransformer {
	mock := &MockChatRecordTransformer{ctrl: ctrl}
	mock.recorder = &MockChatRecordTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRecordTransformer) EXPECT() *MockChatRecordTransformerMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockChatRecordTransformer) Transform(wecomChatRecord *ChatRecord, userInfo *UserInfo, externalContacts []*ExternalContact) (*business.ChatRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", wecomChatRecord, userInfo, externalContacts)
	ret0, _ := ret[0].(*business.ChatRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform.
func (mr *MockChatRecordTransformerMockRecorder) Transform(wecomChatRecord, userInfo, externalContacts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockChatRecordTransformer)(nil).Transform), wecomChatRecord, userInfo, externalContacts)
}

// MockRecordTransformer is a mock of RecordTransformer interface.
type MockRecordTransformer struct {
	ctrl     *gomock.Controller
	recorder *MockRecordTransformerMockRecorder
}

// MockRecordTransformerMockRecorder is the mock recorder for MockRecordTransformer.
type MockRecordTransformerMockRecorder struct {
	mock *MockRecordTransformer
}

// NewMockRecordTransformer creates a new mock instance.
func NewMockRecordTransformer(ctrl *gomock.Controller) *MockRecordTransformer {
	mock := &MockRecordTransformer{ctrl: ctrl}
	mock.recorder = &MockRecordTransformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordTransformer) EXPECT() *MockRecordTransformerMockRecorder {
	return m.recorder
}

// Transform mocks base method.
func (m *MockRecordTransformer) Transform(wecomRecord *ChatRecord) (*business.ChatRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transform", wecomRecord)
	ret0, _ := ret[0].(*business.ChatRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transform indicates an expected call of Transform.
func (mr *MockRecordTransformerMockRecorder) Transform(wecomRecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transform", reflect.TypeOf((*MockRecordTransformer)(nil).Transform), wecomRecord)
}
