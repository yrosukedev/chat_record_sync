// Code generated by MockGen. DO NOT EDIT.
// Source: chat_sync/writer/chat_record/fields_formatter.go

// Package chat_record is a generated GoMock package.
package chat_record

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	business "github.com/yrosukedev/chat_record_sync/chat_sync/business"
)

// MockFieldsFormatter is a mock of FieldsFormatter interface.
type MockFieldsFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockFieldsFormatterMockRecorder
}

// MockFieldsFormatterMockRecorder is the mock recorder for MockFieldsFormatter.
type MockFieldsFormatterMockRecorder struct {
	mock *MockFieldsFormatter
}

// NewMockFieldsFormatter creates a new mock instance.
func NewMockFieldsFormatter(ctrl *gomock.Controller) *MockFieldsFormatter {
	mock := &MockFieldsFormatter{ctrl: ctrl}
	mock.recorder = &MockFieldsFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFieldsFormatter) EXPECT() *MockFieldsFormatterMockRecorder {
	return m.recorder
}

// Format mocks base method.
func (m *MockFieldsFormatter) Format(record *business.ChatRecord) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Format", record)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Format indicates an expected call of Format.
func (mr *MockFieldsFormatterMockRecorder) Format(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Format", reflect.TypeOf((*MockFieldsFormatter)(nil).Format), record)
}
