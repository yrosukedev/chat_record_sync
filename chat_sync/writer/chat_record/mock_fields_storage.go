// Code generated by MockGen. DO NOT EDIT.
// Source: chat_sync/writer/chat_record/fields_storage.go

// Package chat_record is a generated GoMock package.
package chat_record

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFieldsStorage is a mock of FieldsStorage interface.
type MockFieldsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFieldsStorageMockRecorder
}

// MockFieldsStorageMockRecorder is the mock recorder for MockFieldsStorage.
type MockFieldsStorageMockRecorder struct {
	mock *MockFieldsStorage
}

// NewMockFieldsStorage creates a new mock instance.
func NewMockFieldsStorage(ctrl *gomock.Controller) *MockFieldsStorage {
	mock := &MockFieldsStorage{ctrl: ctrl}
	mock.recorder = &MockFieldsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFieldsStorage) EXPECT() *MockFieldsStorageMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockFieldsStorage) Write(fields map[string]interface{}, requestUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", fields, requestUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockFieldsStorageMockRecorder) Write(fields, requestUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFieldsStorage)(nil).Write), fields, requestUUID)
}
